import /.at.lang.futures;

import /.weScrabble.dictionary;

enableFutures(false);

object: {
	def localInterface := object: {
		def parent;

		def init(theParent) {
			parent := theParent;
		};
		
		def setId(id){
			parent.myId := id;
		};
		
		def setTeam(team){
			parent.myTeam := team;
			parent.teams := parent.teams + [team];
			network.online();
		};
		
		def validateWord(wordFormed){
			if: (/.weScrabble.dictionary.findWord: wordFormed) then: {
				def letters := wordFormed.explode();
				def halfLetters := letters.select(1, (letters.length() / 2).round);
				def otherTeams := parent.players.filter: {|player| 
					def [id, reference, team] := player;
					team != parent.myTeam;
				 };
				// Distribute half of the letters of the formed word one at a time.
				if: otherTeams.length() > 0
				then: {
					def current := 1;
					halfLetters.each: {|letter|
						if: current >= otherTeams.length() then: {
							current := 1;
						};
						def [id, reference, team] := otherTeams[current];
						reference <- punishForOpponentForming(team, letter);
						
						current := current + 1;
					};
				};
				
				parent.jWeScrabble.notifyWordValidated(wordFormed);
			}
			else: {
				parent.jWeScrabble.notifyWordInvalidated(wordFormed);
			};
		
		};

		def requestLetter(receiver, letter) {
			parent.teammates[parent.teammates.find: {|teammate| teammate[1] == receiver}][2] <- requestDonation(parent.myId, letter);
		};
		
		def donateLetter(receiver, letter) {
			parent.teammates[parent.teammates.find: {|teammate| teammate[1] == receiver}][2] <- notifyDonationAccepted(letter, parent.myId);
		};
		
		def refuseToDonateLetter(receiver, letter) {
			parent.teammates[parent.teammates.find: {|teammate| teammate[1] == receiver}][2] <- notifyDonationDenied(letter, parent.myId);
		};
		
		def emptyRack() {
			parent.racks := parent.racks.map: {|rack|
				def [id, empty] := rack;
				if: id == parent.myId then: { [id, true] } else: { entry };
			};
			
			def nonEmptyRacks := parent.racks.filter: {|entry|
				def [id, empty] := entry;
				entry == false;
			};
			if: nonEmptyRacks.isEmpty() then: {
				def message := <- notifyGameOver(parent.myTeam);
				parent.players.each: {|entry| 
					def [id, reference, team] := entry;
					reference <+ message;
				};
				parent.jWeScrabble.notifyGameOver(parent.myTeam);
			} else: {
				def message := <- emptyRack(parent.myId);
				parent.teammates.each: {|entry| 
					def [id, reference] := entry;
					reference <+ message;
				};
			}
		};
		
		def nonEmptyRack(){
			parent.racks := parent.racks.map: {|entry|
				def [id, empty] := entry;
				if: id == parent.myId then: { [id, false] } else: { entry };
			};
			
			def message := <- nonEmptyRack(parent.myId);
			parent.teammates.each: {|u| 
				def [id, reference] := u;
				reference <+ message;
			};
		};

		def collectLettersFromTeammates() {
			def loop(references, lettersByTeammates) {
				if: references.length() == 0
				then: {
					parent.jWeScrabble.notifyTeammatesLettersArrived(lettersByTeammates);
				} else: {
					def [id, reference] := references[1];
					// We need @Due here to handle failure, but it does not work properly.
					// Because we were only notified of this issue a week before the deadline,
					// we were unable to resolve it.
					when: reference <- getLettersInRack(parent.myId)@FutureMessage becomes: { |letters|
						if: references.length() == 1 then: {
							lettersByTeammates.put(id, letters);
							parent.jWeScrabble.notifyTeammatesLettersArrived(lettersByTeammates);
						} else: {
							lettersByTeammates.put(id, letters);
							loop(references.select(2, references.length()));
						};
					};
					// A catch: TimeoutException using: clause should follow here, continuing
					// without the letters from the current teammate.
				};
			};
			
			loop(parent.teammates, jlobby.java.util.HashMap.new());
		};
	};
};